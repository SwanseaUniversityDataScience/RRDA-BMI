
/*
This file holds the scripts for generating the results for BMI study.

Section 1. Contribution of source type to completeness in adult cohort.
Section 2. Getting counts for CYP and adult branches for flowchart.
Section 2.1 Getting the average contribution for the DENOM_POP
Section 3. How many people have a BMI reading for x number of years?
Section 4. Completion of records using longitudinal records -- NOT USED IN THE NEW VERSION (FEB 2025)
Section 5. Creation of TableOnes for 5 yearly capture (goes into the manuscript) and yearly capture (goes to Supp Material).
Section 6. Creation of linegraph to show trends of known BMI categories from 2000-2022
Section 7. Creation of Upset plots to show distribution of data
Section 8. Putting all preservation (long) tables together to create the graphs
*/
----------------------------------------------------------
---Section 1. Contribution of source type to completeness in adult cohort.
----------------------------------------------------------
-- Here we look at how many individuals came from each source type using the heirarchy in BMI_COMBO:
--1. ALFs with BMI values from READ codes
--2. ALFs with BMI values from height and weight reading
--3. ALFs with BMI categories from READ codes
--4. ALFs with BMI categories from ICD-10 codes.
-- Note: we use BMI_CLEAN_ADULTS table here.
------------------------------------------------------------
CREATE OR REPLACE VARIABLE SAILW1151V.HDR25_BMI_TOTAL_ALFS_CLEAN_ADULTS  INTEGER;
SET SAILW1151V.HDR25_BMI_TOTAL_ALFS_CLEAN_ADULTS = (SELECT count(DISTINCT alf_e) FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS); -- we need this to get cummulative percentage of the coverage.

CALL FNC.DROP_IF_EXISTS ('SAILW1151V.HDR25_NEW_BMI_TABLECOUNTS_ADULTS');

CREATE TABLE SAILW1151V.HDR25_NEW_BMI_TABLECOUNTS_ADULTS
(
	row_no 			char(1),
	description		VARCHAR(500),
	distinct_alfs 	INTEGER,
	percentage		DECIMAL(5,2),
	cum_perc		DECIMAL(5,2)
);

INSERT INTO SAILW1151V.HDR25_NEW_BMI_TABLECOUNTS_ADULTS;

WITH t1 AS
(
SELECT 
	'1' AS row_no,
	'alf_es with BMI values available from WLGP data' AS DESCRIPTION,
	count(DISTINCT alf_e) AS COUNTS
FROM
	SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS
WHERE source_type = 'bmi value' 
),
t2 AS --- counting alf_e's that have bmi_val, but not bmi_cat from WLGP
(
SELECT 
	'2' AS row_no,
	'alf_es without BMI values but have height and weight from WLGP, MIDS, and NCCH' AS description,
	count(DISTINCT alf_e) AS counts
FROM
	SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS
WHERE source_type = 'weight'
AND alf_e NOT IN
	(SELECT 
		DISTINCT alf_e
	FROM
		SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS
	WHERE source_type = 'bmi value')
),
t3 AS----- counting alf_e's that have bmi category allocation from height and weight (both from MIDS and WLGP, and no bmi_val and bmi_cat)
(
SELECT 
	'3' AS row_no,
	'alf_es without BMI values, but BMI category from WLGP' AS description,
	count(DISTINCT alf_e) AS counts
FROM
	SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS
WHERE 
	source_type = 'bmi category'
AND alf_e NOT IN
	(
	SELECT 
		DISTINCT alf_e
	FROM
		SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS
	WHERE source_type = 'bmi value'
	UNION 
	SELECT 
		DISTINCT alf_e
	FROM
		SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS
	WHERE source_type = 'weight'
	)
),
t4 AS -------- counting alf_e's unique to MIDS
(
SELECT 
	'4' AS row_no,
	'alf_es without BMI values or BMI categories, but have ICD-10 code from PEDW' AS description,
	count(DISTINCT alf_e) AS counts  
FROM 
	SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS
WHERE source_type = 'ICD-10'
AND alf_e NOT IN
	(
	SELECT 
		DISTINCT alf_e
	FROM
		SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS
	WHERE source_type = 'bmi value'
	UNION 
	SELECT 
		DISTINCT alf_e
	FROM
		SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS
	WHERE source_type = 'weight'
	UNION
	SELECT DISTINCT alf_e
	FROM
		SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS
	WHERE source_type = 'bmi category'
	)
)
SELECT
	*,
	ROUND((counts * 1.0 / SAILW1151V.HDR25_BMI_TOTAL_ALFS_CLEAN_ADULTS * 100), 2) AS percentage,
	ROUND((sum(counts) OVER (ORDER BY row_no) * 1.0 / SAILW1151V.HDR25_BMI_TOTAL_ALFS_CLEAN_ADULTS * 100), 2) AS cum_perc
FROM
	(
	SELECT * FROM t1
	UNION ALL
	SELECT * FROM t2
	UNION ALL
	SELECT * FROM t3
	UNION ALL
	SELECT * FROM t4
	)
ORDER BY
	row_no	
;

SELECT * FROM SAILW1151V.HDR25_NEW_BMI_TABLECOUNTS_ADULTS
ORDER BY row_no;
*/

--------------
-- Section 2. Getting counts for CYP and adult branches for flowchart
--------------
SELECT 
	'CYP - 1. COMBO' AS name,
	count(DISTINCT alf_e) AS N,
	count(*) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_COMBO_CYP hnbcc 
UNION 
SELECT 
	'CYP - 2. Unclean - flagged' AS name,
	count(DISTINCT alf_e) AS N,
	count(*) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_UNCLEAN_CYP hnbuc 
WHERE bmi_flg = 1 OR bmi_flg = 3
UNION
SELECT 
	'CYP 3. CLEAN - final table' AS name,
	count(DISTINCT alf_e) AS N,
	count(*) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP hnbuc 
UNION
SELECT 
	'Adults - 1. COMBO' AS name,
	count(DISTINCT alf_e) AS N,
	count(*) AS counts
FROM SAILW1151V.HDR25_BMI_COMBO_ADULTS hbca 
UNION 
SELECT 
	'Adults 2. Unclean - same-day' AS name,
	count(DISTINCT alf_e) AS N,
	count(*) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_UNCLEAN_SAMEDAY 
UNION
SELECT 
	'Adults 3. Unclean - over-time inconsistencies flagged' AS name,
	count(DISTINCT alf_e) AS N,
	count(*) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_UNCLEAN_OVERTIME
WHERE BMI_FLG_OVER_TIME = 2 OR BMI_FLG_OVER_TIME = 4
UNION 
SELECT 
	'Adults 4. Unclean - over-time' AS name,
	count(DISTINCT alf_e) AS N,
	count(*) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_UNCLEAN_OVERTIME
UNION
SELECT 
	'Adults 5. CLEAN - final table' AS name,
	count(DISTINCT alf_e) AS N,
	count(*) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS hnbca 

SELECT count(DISTINCT alf_e) FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP;
SELECT count(DISTINCT alf_e) FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP
WHERE bmi_cat != 'Unknown'

-------------------------
-- Section 2.1 Getting the average contribution for the DENOM_POP
---------------------------
SELECT
	avg(contribution)
FROM
(
SELECT DISTINCT 
	alf_e,
	CASE 
		WHEN (updated_end_date - updated_start_date) = 0 THEN 1
		ELSE (updated_end_date - updated_start_date)
		END AS contribution
FROM
	(
	SELECT 
		*,
		CASE WHEN start_date < '2000-01-01' THEN 2000
		ELSE YEAR(start_date)
		END AS updated_start_date,
		CASE
			WHEN dod IS NOT NULL THEN YEAR(dod)
			WHEN dod IS NULL THEN YEAR(end_date)
			WHEN end_date <= '2022-31-12' 	THEN YEAR(end_date)
			ELSE 2023 -- to capture the full length of 2022 as the ending year.
			END AS updated_end_date
	FROM SAILW1151V.HDR25_BMI_POP_DENOM
	WHERE end_date <= '2022-12-31'
	UNION
	SELECT 
		*,
		CASE 
			WHEN start_date < '2000-01-01' THEN 2000
			ELSE YEAR(start_date)
			END AS updated_start_date,
		2023 AS updated_end_date
	FROM SAILW1151V.HDR25_BMI_POP_DENOM
	WHERE end_date > '2022-12-31'
	)
);
----------------------------
-- Section 3. How many people have a BMI reading for x number of years?
----------------------------
CREATE OR REPLACE VARIABLE SAILW1151V.HDR25_BMI_TOTAL_ALFS_CLEAN_CYP  INTEGER;
SET SAILW1151V.HDR25_BMI_TOTAL_ALFS_CLEAN_CYP = (SELECT count(DISTINCT alf_e) FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP); -- we need this to get cummulative percentage of the coverage.

CREATE OR REPLACE VARIABLE SAILW1151V.HDR25_BMI_TOTAL_ALFS_CLEAN_ADULTS  INTEGER;
SET SAILW1151V.HDR25_BMI_TOTAL_ALFS_CLEAN_ADULTS = (SELECT count(DISTINCT alf_e) FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS); -- we need this to get cummulative percentage of the coverage.

SELECT 
	'Adults' AS pop,
	sex,
	total_bmi_years,
	counts,
	ROUND((counts * 1.0 / SAILW1151V.HDR25_BMI_TOTAL_ALFS_CLEAN_ADULTS * 100), 2) AS percentage
FROM
	(
	SELECT 
		sex,
		total_bmi_years,
		count(alf_e) AS counts
	FROM
		(
		SELECT
			alf_e,
			sex,
			CASE
				WHEN SUM(year_counts) <=5 THEN '< 5 years'
				ELSE '> 5 years'
			END AS total_bmi_years
		FROM 
			(
			SELECT 	
				alf_e,
				sex,
				MIN(dt_order) AS year_counts
			FROM
				(
				SELECT 
					alf_e,
					CASE
						WHEN sex = 1 THEN 'Male'
						ELSE 'Female'
						END AS sex,
					bmi_year,
					dod,
					ROW_NUMBER() OVER (PARTITION BY alf_e, bmi_year ORDER BY bmi_year) AS dt_order
				FROM 
					SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS
				WHERE bmi_cat IS NOT NULL
				)
			GROUP BY
				alf_e, 
				sex, 
				bmi_year
			)
		GROUP BY
			alf_e, 
			sex
		)
	GROUP BY
		sex, 
		total_bmi_years
	)
UNION
SELECT 
	'Adults' AS pop,
	'All adults' AS sex,
	total_bmi_years,
	counts,
	ROUND((counts * 1.0 / SAILW1151V.HDR25_BMI_TOTAL_ALFS_CLEAN_ADULTS * 100), 2) AS percentage
FROM
	(
	SELECT 
		total_bmi_years,
		count(alf_e) AS counts
	FROM
		(
		SELECT
			alf_e,
			CASE
				WHEN SUM(year_counts) <=5 THEN '< 5 years'
				ELSE '> 5 years'
			END AS total_bmi_years
		FROM 
			(
			SELECT 	
				alf_e,
				MIN(dt_order) AS year_counts
			FROM
				(
				SELECT 
					alf_e,
					bmi_year,
					dod,
					ROW_NUMBER() OVER (PARTITION BY alf_e, bmi_year ORDER BY bmi_year) AS dt_order
				FROM 
					SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS
				WHERE bmi_cat IS NOT NULL
				)
			GROUP BY
				alf_e, 
				bmi_year
			)
		GROUP BY
			alf_e 
		)
	GROUP BY
		total_bmi_years
	)
UNION
SELECT 
	'CYP' AS pop,
	sex,
	total_bmi_years,
	counts,
	ROUND((counts * 1.0 / SAILW1151V.HDR25_BMI_TOTAL_ALFS_CLEAN_CYP * 100), 2) AS percentage
FROM
	(
	SELECT 
		sex,
		total_bmi_years,
		count(alf_e) AS counts
	FROM
		(
		SELECT
			alf_e,
			sex,
			CASE
				WHEN SUM(year_counts) <=5 THEN '< 5 years'
				ELSE '> 5 years'
			END AS total_bmi_years
		FROM 
			(
			SELECT 	
				alf_e,
				sex,
				MIN(dt_order) AS year_counts
			FROM
				(
				SELECT 
					alf_e,
					CASE
						WHEN sex = 1 THEN 'Male'
						ELSE 'Female'
						END AS sex,
					bmi_year,
					dod,
					ROW_NUMBER() OVER (PARTITION BY alf_e, bmi_year ORDER BY bmi_year) AS dt_order
				FROM 
					SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP
				WHERE percentile_bmi_cat IS NOT NULL
				)
			GROUP BY
				alf_e, 
				sex, 
				bmi_year
			)
		GROUP BY
			alf_e, 
			sex
		)
	GROUP BY
		sex, 
		total_bmi_years
	)
UNION
SELECT 
	'CYP' AS pop,
	'All CYP' AS sex,
	total_bmi_years,
	counts,
	ROUND((counts * 1.0 / SAILW1151V.HDR25_BMI_TOTAL_ALFS_CLEAN_CYP * 100), 2) AS percentage
FROM
	(
	SELECT 
		total_bmi_years,
		count(alf_e) AS counts
	FROM
		(
		SELECT
			alf_e,
			CASE
				WHEN SUM(year_counts) <=5 THEN '< 5 years'
				ELSE '> 5 years'
			END AS total_bmi_years
		FROM 
			(
			SELECT 	
				alf_e,
				MIN(dt_order) AS year_counts
			FROM
				(
				SELECT 
					alf_e,
					bmi_year,
					dod,
					ROW_NUMBER() OVER (PARTITION BY alf_e, bmi_year ORDER BY bmi_year) AS dt_order
				FROM 
					SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP
				WHERE percentile_bmi_cat IS NOT NULL
				)
			GROUP BY
				alf_e, 
				bmi_year
			)
		GROUP BY
			alf_e 
		)
	GROUP BY
		total_bmi_years
	)
ORDER BY
	pop,
	sex,
	total_bmi_years
	

/* NOT USED IN THE NEW VERSION (FEB 2025)
----------------------------------------------------------
---Section 4. Completion of records using longitudinal records  
----------------------------------------------------------
-- Here we look at how many individuals have known BMI records if we preserve records in the last year, 3 years, 5 years, 7 years, and 10 years.
-- This shows how the algorithm could help increase coverage of known BMI records for individuals.
-- Note that this takes the latest reading for that time interval specified.
------------------------------------------------------------
--x. creating table which lists changes in number of knowns when we extend the duration for BMI records.
--1. first create the bmi_date_to variable otherwise the table will be empty.
CREATE OR REPLACE VARIABLE SAILW1151V.HDR25_BMI_DATE_TO  DATE;
SET SAILW1151V.HDR25_BMI_DATE_TO = '2022-12-31';
----SET SAILW1151V.HDR25_BMI_DATE_TO = 'YYYY-MM-DD'

--2. getting the total distinct alfs from all of the adults from 2000-2022.
CREATE OR REPLACE VARIABLE SAILW1151V.HDR25_BMI_TOTAL_ALFS_CLEAN_ADULTS_POP_ALL_YEARS  INTEGER;
SET SAILW1151V.HDR25_BMI_TOTAL_ALFS_CLEAN_ADULTS_POP_ALL_YEARS = (SELECT count(DISTINCT alf_e) FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP_ALLYEARS); -- we need this to get cummulative percentage of the coverage.

CALL FNC.DROP_IF_EXISTS ('SAILW1151V.HDR25_NEW_BMI_INTERVAL');

CREATE TABLE SAILW1151V.HDR25_NEW_BMI_INTERVAL
(
	row_no				char(1),
	description			VARCHAR(1000),
	value				INTEGER,
	known_perc			DECIMAL(5,2)
);

INSERT INTO  SAILW1151V.HDR25_NEW_BMI_INTERVAL
WITH t1 AS
(
SELECT
	'1' AS row_no,
	'1 year' AS description,
	count(DISTINCT alf_e) AS distinct_alfs
FROM
	(
	SELECT 
	DISTINCT alf_e, 
	CASE
		WHEN interval_dt <= 1		THEN BMI_cat
		ELSE 'Unknown'
		END AS bmi_cat,
	CASE 
		WHEN interval_dt <= 1		THEN BMI_DT
		ELSE NULL
		END AS bmi_dt,
	interval_dt
	FROM 
		(
		SELECT DISTINCT
			alf_e,
			bmi_cat,
			bmi_dt,
			DAYS_BETWEEN(SAILW1151V.HDR25_BMI_DATE_TO, BMI_DT)/365.25 AS interval_dt, -- how long between dates
			ROW_NUMBER() OVER (PARTITION BY alf_e ORDER BY bmi_dt DESC) AS dt_order	-- to get the earliest 1 year reading.
		FROM 
			SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP_ALLYEARS
		WHERE bmi_cat != 'Unknown'
		ORDER BY alf_e, bmi_dt
		)
	WHERE dt_order = 1 -- the latest reading they have for this interval
	)
WHERE bmi_cat != 'Unknown' AND interval_dt <= 1
),
t2 AS 
(
SELECT
	'2' AS row_no,
	'3 years' AS description,
	count(DISTINCT alf_e) AS distinct_alfs
FROM
	(
	SELECT DISTINCT 
		alf_e, 
		bmi_cat,
		bmi_dt,
		interval_dt
	FROM 
		(
		SELECT 
			alf_e,
			bmi_cat,
			bmi_dt,
			DAYS_BETWEEN(SAILW1151V.HDR25_BMI_DATE_TO, BMI_DT)/365.25 AS interval_dt, -- how long between dates
			ROW_NUMBER() OVER (PARTITION BY alf_e ORDER BY bmi_dt desc) AS dt_order	-- to get the earliest 3 year reading
		FROM 
			SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP_ALLYEARS
		WHERE bmi_cat != 'Unknown' AND DAYS_BETWEEN(SAILW1151V.HDR25_BMI_DATE_TO, BMI_DT)/365.25 <= 3
		)
	WHERE dt_order = 1 -- the latest reading they have for this interval
	)
WHERE bmi_cat != 'Unknown'
),
t3 AS 
(
SELECT
	'3' AS row_no,
	'5 years' AS description,
	count(DISTINCT alf_e) AS distinct_alfs
FROM
	( 
	SELECT DISTINCT 
		alf_e, 
		bmi_cat,
		bmi_dt,
		interval_dt
	FROM 
		(
		SELECT 
			alf_e,
			bmi_cat,
			bmi_dt,
			DAYS_BETWEEN(SAILW1151V.HDR25_BMI_DATE_TO, BMI_DT)/365.25 AS interval_dt, -- how long between dates
			ROW_NUMBER() OVER (PARTITION BY alf_e ORDER BY bmi_dt desc) AS dt_order	-- to get the latest 5 year reading
		FROM 
			SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP_ALLYEARS
		WHERE bmi_cat != 'Unknown' AND DAYS_BETWEEN(SAILW1151V.HDR25_BMI_DATE_TO, BMI_DT)/365.25 <= 5
		)
	WHERE dt_order = 1 -- the latest reading they have for this interval
	)
WHERE bmi_cat != 'Unknown'
),
t4 AS 
(
SELECT
	'4' AS row_no,
	'7 years' AS description,
	count(DISTINCT alf_e) AS distinct_alfs
FROM
	(
	SELECT DISTINCT 
		alf_e, 
		bmi_cat,
		bmi_dt,
		interval_dt
	FROM 
		(
		SELECT 
			alf_e,
			bmi_cat,
			bmi_dt,
			DAYS_BETWEEN(SAILW1151V.HDR25_BMI_DATE_TO, BMI_DT)/365.25 AS interval_dt, -- how long between dates
			ROW_NUMBER() OVER (PARTITION BY alf_e ORDER BY bmi_dt desc) AS dt_order	-- to get the earliest 7 year reading
		FROM 
			SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP_ALLYEARS
		WHERE bmi_cat != 'Unknown' AND DAYS_BETWEEN(SAILW1151V.HDR25_BMI_DATE_TO, BMI_DT)/365.25 <= 7
		)
	WHERE dt_order = 1 -- the latest reading they have for this interval
	) 
WHERE bmi_cat != 'Unknown'
),
t5 AS
(
SELECT
	'5' AS row_no,
	'10 years' AS description,
	count(DISTINCT alf_e) AS distinct_alfs
FROM
	(
	SELECT DISTINCT 
		alf_e, 
		bmi_cat,
		bmi_dt,
		interval_dt
	FROM 
		(SELECT 
			alf_e,
			bmi_cat,
			bmi_dt,
			DAYS_BETWEEN(SAILW1151V.HDR25_BMI_DATE_TO, BMI_DT)/365.25 AS interval_dt, -- how long between dates
			ROW_NUMBER() OVER (PARTITION BY alf_e ORDER BY bmi_dt desc) AS dt_order	-- to get the earliest 10 year reading
		FROM 
			SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP_ALLYEARS
		WHERE bmi_cat != 'Unknown' AND DAYS_BETWEEN(SAILW1151V.HDR25_BMI_DATE_TO, BMI_DT)/365.25 <= 15
		) 
	WHERE dt_order = 1
	)
WHERE bmi_cat != 'Unknown'
),
t6 AS
(
SELECT
	'6' AS row_no,
	'15 years' AS description,
	count(DISTINCT alf_e) AS distinct_alfs
FROM
	(
	SELECT DISTINCT 
		alf_e, 
		bmi_cat,
		bmi_dt,
		interval_dt
	FROM 
		(
		SELECT 
			alf_e,
			bmi_cat,
			bmi_dt,
			DAYS_BETWEEN(SAILW1151V.HDR25_BMI_DATE_TO, BMI_DT)/365.25 AS interval_dt, -- how long between dates
			ROW_NUMBER() OVER (PARTITION BY alf_e ORDER BY bmi_dt) AS dt_order	-- to get the earlier reading
		FROM 
			SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP_ALLYEARS
		WHERE bmi_cat != 'Unknown' AND bmi_dt IS NOT NULL	
		ORDER BY alf_e--, bmi_dt
		)
	GROUP BY alf_e, bmi_dt, interval_dt, bmi_cat
	)
WHERE bmi_cat != 'Unknown'
)
SELECT
	*,
	ROUND((distinct_alfs * 1.0 / SAILW1151V.HDR25_BMI_TOTAL_ALFS_CLEAN_ADULTS_POP_ALL_YEARS * 100), 2) AS percentage
FROM
	(
	SELECT * FROM t1
	UNION
	SELECT * FROM T2
	UNION
	SELECT * FROM T3
	UNION
	SELECT * FROM T4
	UNION
	SELECT * FROM T5
	UNION
	SELECT * FROM T6
	)
;
		
SELECT * FROM SAILW1151V.HDR25_NEW_BMI_INTERVAL
ORDER BY row_no;
*/



---------------------------------------------------------------------------------
-- Section 5. Creation of TableOnes for 5 yearly capture (goes into the manuscript) and yearly capture (goes to Supp Material).
---------------------------------------------------------------------------------
-- Note: Each individual 5 year periods have been created somewhere else. This section puts together all of these to be plugged in R.
------------------
CALL FNC.DROP_IF_EXISTS('SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP_5YEARLY');

CREATE TABLE SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP_5YEARLY
(
-- from denominator table
		alf_e        				BIGINT, 
		WDSPERSONID_E				BIGINT,
-- from ETHN table.
		ethnicity				CHAR(100), 
-- from WDSD		
		sex						CHAR(1), 
		wob						DATE, 
		dod						DATE,
		ralf					BIGINT,
-- from BMI_CLEAN
		age_band				VARCHAR(100),
		bmi_dt					DATE,
		bmi_cat					VARCHAR(100),
		bmi_year				VARCHAR(10),
-- from WDSD/ref tables
		active_from				DATE,
		active_to				DATE,
		wimd2019_quintile		VARCHAR(20),
		rural_urban				VARCHAR(200),
		lsoa2011_cd_updated		VARCHAR(10)
);

--- year 2000 - 2004
INSERT INTO SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP_5YEARLY
SELECT * FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP_2000_2004
UNION
SELECT * FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP_2005_2009
UNION
SELECT * FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP_2010_2014
UNION
SELECT * FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP_2015_2019
UNION
SELECT * FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP_2020_2022;

SELECT DISTINCT bmi_year FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP_5YEARLY;

---- TableOne 5yearly for CYP
CALL FNC.DROP_IF_EXISTS('SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP_5YEARLY');

CREATE TABLE SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP_5YEARLY
(
-- from denominator table
		alf_e        				BIGINT, 
		WDSPERSONID_E				BIGINT,
-- from ETHN table.
		ethnicity				CHAR(100), 
-- from WDSD		
		sex						CHAR(1), 
		wob						DATE, 
		dod						DATE,
		ralf					BIGINT,
-- from BMI_CLEAN
		age_band				VARCHAR(100),
		bmi_dt					DATE,
		bmi_cat					VARCHAR(100),
		bmi_year				VARCHAR(10),
-- from WDSD/ref tables
		active_from				DATE,
		active_to				DATE,
		wimd2019_quintile		VARCHAR(20),
		rural_urban				VARCHAR(200),
		lsoa2011_cd_updated		VARCHAR(10)
);


INSERT INTO SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP_5YEARLY
SELECT * FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP_2000_2004
UNION
SELECT * FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP_2005_2009
UNION
SELECT * FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP_2010_2014
UNION
SELECT * FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP_2015_2019
UNION
SELECT * FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP_2020_2022;

SELECT sex, ethnicity, age_band, bmi_year, bmi_cat, wimd2019_quintile, rural_urban FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP_5yearly
WHERE rural_urban IS NULL;


---------- Supplementary Tables:
SELECT * FROM SAILW1151V.HDR25_NEW_BMI_TABLEONE_ADULTS where bmi_year >= 2010;
---- TableOne yearly for CYP
CALL FNC.DROP_IF_EXISTS ('SAILW1151V.HDR25_NEW_BMI_TABLEONE_CYP');

CREATE TABLE SAILW1151V.HDR25_NEW_BMI_TABLEONE_CYP
(
	ALF_E				BIGINT
	,SEX					CHAR(1)
	,ETHNICITY			VARCHAR(10)
	,AGE_BAND			VARCHAR(10)
	,BMI_YEAR			VARCHAR(4)
	,BMI_CAT				VARCHAR(100)
	,WIMD2019_QUINTILE	VARCHAR(100)
	,RURAL_URBAN			VARCHAR(100)

);

INSERT INTO SAILW1151V.HDR25_NEW_BMI_TABLEONE_CYP
WITH t1 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP
WHERE BMI_YEAR = 2000
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
T2 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP
WHERE BMI_YEAR = 2001
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
t3 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP
WHERE BMI_YEAR = 2002
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
T4 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP
WHERE BMI_YEAR = 2003
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
t5 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP
WHERE BMI_YEAR = 2004
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
T6 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP
WHERE BMI_YEAR = 2005
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
t7 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP
WHERE BMI_YEAR = 2006
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
T8 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP
WHERE BMI_YEAR = 2007
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
t9 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP
WHERE BMI_YEAR = 2008
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
T10 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP
WHERE BMI_YEAR = 2009
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
t11 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP
WHERE BMI_YEAR = 2010
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
T12 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP
WHERE BMI_YEAR = 2011
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
t13 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP
WHERE BMI_YEAR = 2012
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
T14 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP
WHERE BMI_YEAR = 2013
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
t15 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP
WHERE BMI_YEAR = 2014
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
T16 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP
WHERE BMI_YEAR = 2015
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
t17 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP
WHERE BMI_YEAR = 2016
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
T18 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP
WHERE BMI_YEAR = 2017
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
t19 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP
WHERE BMI_YEAR = 2018
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
T20 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP
WHERE BMI_YEAR = 2019
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
t21 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP
WHERE BMI_YEAR = 2020
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
T22 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP
WHERE BMI_YEAR = 2021
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
T23 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP
WHERE BMI_YEAR = 2022
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
TABLEONE AS (
SELECT * FROM T1 WHERE COUNTS = 1
UNION
SELECT * FROM T2 WHERE COUNTS = 1
UNION
SELECT * FROM T3 WHERE COUNTS = 1
UNION
SELECT * FROM T4 WHERE COUNTS = 1
UNION
SELECT * FROM T5 WHERE COUNTS = 1
UNION
SELECT * FROM T6 WHERE COUNTS = 1
UNION
SELECT * FROM T7 WHERE COUNTS = 1
UNION
SELECT * FROM T8 WHERE COUNTS = 1
UNION
SELECT * FROM T9 WHERE COUNTS = 1
UNION
SELECT * FROM T10 WHERE COUNTS = 1
UNION
SELECT * FROM T11 WHERE COUNTS = 1
UNION
SELECT * FROM T12 WHERE COUNTS = 1
UNION
SELECT * FROM T13 WHERE COUNTS = 1
UNION
SELECT * FROM T14 WHERE COUNTS = 1
UNION
SELECT * FROM T15 WHERE COUNTS = 1
UNION
SELECT * FROM T16 WHERE COUNTS = 1
UNION
SELECT * FROM T17 WHERE COUNTS = 1
UNION
SELECT * FROM T18 WHERE COUNTS = 1
UNION
SELECT * FROM T19 WHERE COUNTS = 1
UNION
SELECT * FROM T20 WHERE COUNTS = 1
UNION
SELECT * FROM T21 WHERE COUNTS = 1
UNION
SELECT * FROM T22 WHERE COUNTS = 1
UNION
SELECT * FROM T23 WHERE COUNTS = 1
)
SELECT 
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN
FROM TABLEONE

SELECT DISTINCT bmi_year FROM SAILW1151V.HDR25_NEW_BMI_TABLEONE_ADULTS;
---- TableOne yearly for Adults
CALL FNC.DROP_IF_EXISTS ('SAILW1151V.HDR25_NEW_BMI_TABLEONE_ADULTS');

CREATE TABLE SAILW1151V.HDR25_NEW_BMI_TABLEONE_ADULTS
(
	ALF_E				BIGINT
	,SEX					CHAR(1)
	,ETHNICITY			VARCHAR(10)
	,AGE_BAND			VARCHAR(100)
	,BMI_YEAR			VARCHAR(4)
	,BMI_CAT				VARCHAR(100)
	,WIMD2019_QUINTILE	VARCHAR(100)
	,RURAL_URBAN			VARCHAR(100)

);


INSERT INTO SAILW1151V.HDR25_NEW_BMI_TABLEONE_ADULTS
WITH t1 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP
WHERE BMI_YEAR = 2000
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
T2 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP
WHERE BMI_YEAR = 2001
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
t3 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP
WHERE BMI_YEAR = 2002
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
T4 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP
WHERE BMI_YEAR = 2003
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
t5 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP
WHERE BMI_YEAR = 2004
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
T6 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP
WHERE BMI_YEAR = 2005
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
t7 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP
WHERE BMI_YEAR = 2006
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
T8 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP
WHERE BMI_YEAR = 2007
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
t9 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP
WHERE BMI_YEAR = 2008
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
T10 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP
WHERE BMI_YEAR = 2009
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
t11 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP
WHERE BMI_YEAR = 2010
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
T12 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP
WHERE BMI_YEAR = 2011
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
t13 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP
WHERE BMI_YEAR = 2012
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
T14 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP
WHERE BMI_YEAR = 2013
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
t15 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP
WHERE BMI_YEAR = 2014
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
T16 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP
WHERE BMI_YEAR = 2015
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
t17 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP
WHERE BMI_YEAR = 2016
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
T18 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP
WHERE BMI_YEAR = 2017
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
t19 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP
WHERE BMI_YEAR = 2018
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
T20 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP
WHERE BMI_YEAR = 2019
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
t21 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP
WHERE BMI_YEAR = 2020
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
T22 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP
WHERE BMI_YEAR = 2021
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
T23 AS (
SELECT DISTINCT
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	ROW_NUMBER () OVER (PARTITION BY alf_e ORDER BY BMI_DT DESC) AS counts
FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP
WHERE BMI_YEAR = 2022
GROUP BY ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN,
	BMI_DT
ORDER BY ALF_E
),
TABLEONE AS (
SELECT * FROM T1 WHERE COUNTS = 1
UNION
SELECT * FROM T2 WHERE COUNTS = 1
UNION
SELECT * FROM T3 WHERE COUNTS = 1
UNION
SELECT * FROM T4 WHERE COUNTS = 1
UNION
SELECT * FROM T5 WHERE COUNTS = 1
UNION
SELECT * FROM T6 WHERE COUNTS = 1
UNION
SELECT * FROM T7 WHERE COUNTS = 1
UNION
SELECT * FROM T8 WHERE COUNTS = 1
UNION
SELECT * FROM T9 WHERE COUNTS = 1
UNION
SELECT * FROM T10 WHERE COUNTS = 1
UNION
SELECT * FROM T11 WHERE COUNTS = 1
UNION
SELECT * FROM T12 WHERE COUNTS = 1
UNION
SELECT * FROM T13 WHERE COUNTS = 1
UNION
SELECT * FROM T14 WHERE COUNTS = 1
UNION
SELECT * FROM T15 WHERE COUNTS = 1
UNION
SELECT * FROM T16 WHERE COUNTS = 1
UNION
SELECT * FROM T17 WHERE COUNTS = 1
UNION
SELECT * FROM T18 WHERE COUNTS = 1
UNION
SELECT * FROM T19 WHERE COUNTS = 1
UNION
SELECT * FROM T20 WHERE COUNTS = 1
UNION
SELECT * FROM T21 WHERE COUNTS = 1
UNION
SELECT * FROM T22 WHERE COUNTS = 1
UNION
SELECT * FROM T23 WHERE COUNTS = 1
)
SELECT 
	ALF_E,
	SEX,
	ETHNICITY,
	AGE_BAND,
	BMI_YEAR, 
	BMI_CAT,
	WIMD2019_QUINTILE,
	RURAL_URBAN
FROM TABLEONE

-------------------
-- Section 6. Creation of linegraph to show trends of known BMI categories from 2000-2022
---------------------
CALL FNC.DROP_IF_EXISTS ('SAILW1151V.HDR25_NEW_BMI_LINEPLOT_ALL');

SELECT * FROM SAILW1151V.HDR25_NEW_BMI_LINEPLOT_ALL;

CREATE TABLE SAILW1151V.HDR25_NEW_BMI_LINEPLOT_ALL
(
	POP			VARCHAR(10)
	,BMI_YEAR	VARCHAR(4)
	,BMI_CAT	VARCHAR(100)
	,FREQUENCY	INTEGER
	
);

INSERT INTO SAILW1151V.HDR25_NEW_BMI_LINEPLOT_ALL
SELECT DISTINCT
	'Adults' AS pop,
	bmi_year,
	bmi_cat,
	count(DISTINCT alf_e) AS frequency
FROM
	(
	SELECT
		alf_e,
		bmi_year,
		bmi_dt,
		bmi_cat,
		ROW_NUMBER () OVER (PARTITION BY alf_e, bmi_year ORDER BY bmi_dt desc) AS counts
	FROM
		SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP 
	)	
WHERE counts = 1
GROUP BY 
	bmi_year,
	bmi_cat
UNION
--- for CYP
SELECT DISTINCT
	'CYP' AS pop,
	bmi_year,
	bmi_cat,
	count(DISTINCT alf_e) AS frequency
FROM
	(
	SELECT
		alf_e,
		bmi_year,
		bmi_dt,
		bmi_cat,
		ROW_NUMBER () OVER (PARTITION BY alf_e, bmi_year ORDER BY bmi_dt desc) AS counts
	FROM
		SAILW1151V.HDR25_NEW_BMI_CLEAN_CYP_POP 
	)	
WHERE counts = 1
GROUP BY 
	bmi_year,
	bmi_cat
ORDER BY
	bmi_year,
	bmi_cat

-- how many for each category overall across the years?

	SELECT DISTINCT bmi_year FROM SAILW1151V.HDR25_NEW_BMI_CLEAN_ADULTS_POP;
---------------------------------------------------------------------------------
-- Section 7. Creation of Upset plots to show distribution of data
---------------------------------------------------------------------------------
-- Note: This dataframe uses BMI_UNCLEAN tables and is used to create UPSET plots in python.
--       To make the UPSET plot work, columns should be INTEGER (1  or 0).
--	     This code has one row per ALF and indicates whether they have an entry from either WLGP, PEDW, MIDS, or NCCH as appropriate for the cohort.
------------------
CALL FNC.DROP_IF_EXISTS ('SAILW1151V.HDR25_NEW_BMI_UPSETPLOT_ADULTS');

CREATE TABLE SAILW1151V.HDR25_NEW_BMI_UPSETPLOT_ADULTS
(
	alf_e	BIGINT,	
	WLGP	INTEGER,
	MIDS	INTEGER,
	PEDW	INTEGER
	
);

INSERT INTO SAILW1151V.HDR25_NEW_BMI_UPSETPLOT_ADULTS;
SELECT
	DISTINCT a.alf_e,
	CASE 
		WHEN WLGP = 1 THEN 1
		ELSE 0
		END AS WLGP,
	CASE 
		WHEN MIDS = 1 THEN 1
		ELSE 0
		END AS MIDS,
	CASE 
		WHEN PEDW = 1 THEN 1
		ELSE 0
		END AS PEDW
FROM
	SAILW1151V.HDR25_NEW_BMI_UNCLEAN_OVERTIME a
LEFT JOIN
	(
	SELECT	
		DISTINCT alf_e,
		1 AS WLGP
	FROM 
		SAILW1151V.HDR25_NEW_BMI_UNCLEAN_OVERTIME
	WHERE source_db = 'WLGP'
	)b	
ON a.alf_e = b.alf_e
LEFT JOIN
	(
	SELECT	
		DISTINCT alf_e,
		1 AS MIDS
	FROM 
		SAILW1151V.HDR25_NEW_BMI_UNCLEAN_OVERTIME
	WHERE source_db = 'MIDS'
	)c	
ON a.alf_e = c.alf_e
LEFT JOIN
	(
	SELECT	
		DISTINCT alf_e,
		1 AS PEDW
	FROM 
		SAILW1151V.HDR25_NEW_BMI_UNCLEAN_OVERTIME
	WHERE source_db = 'PEDW'
	)d	
ON a.alf_e = d.alf_e;


-- upset plot for CYP
CALL FNC.DROP_IF_EXISTS ('SAILW1151V.HDR25_NEW_BMI_UPSETPLOT_CYP');

CREATE TABLE SAILW1151V.HDR25_NEW_BMI_UPSETPLOT_CYP
(
	alf_e	BIGINT,	
	WLGP	INTEGER,
	MIDS	INTEGER,
	PEDW	INTEGER,
	NCCH	INTEGER
	
);

INSERT INTO SAILW1151V.HDR25_NEW_BMI_UPSETPLOT_CYP
SELECT
	DISTINCT a.alf_e,
	CASE 
		WHEN WLGP = 1 THEN 1
		ELSE 0
		END AS WLGP,
	CASE 
		WHEN MIDS = 1 THEN 1
		ELSE 0
		END AS MIDS,
	CASE 
		WHEN PEDW = 1 THEN 1
		ELSE 0
		END AS PEDW,
	CASE
		WHEN NCCH = 1 THEN 1
		ELSE 0
		END AS NCCH
FROM
	SAILW1151V.HDR25_NEW_BMI_UNCLEAN_CYP a
LEFT JOIN
	(
	SELECT	
		DISTINCT alf_e,
		1 AS WLGP
	FROM 
		SAILW1151V.HDR25_NEW_BMI_UNCLEAN_CYP
	WHERE source_db = 'WLGP'
	)b	
ON a.alf_e = b.alf_e
LEFT JOIN
	(
	SELECT	
		DISTINCT alf_e,
		1 AS MIDS
	FROM 
		SAILW1151V.HDR25_NEW_BMI_UNCLEAN_CYP
	WHERE source_db = 'MIDS'
	)c	
ON a.alf_e = c.alf_e
LEFT JOIN
	(
	SELECT	
		DISTINCT alf_e,
		1 AS PEDW
	FROM 
		SAILW1151V.HDR25_NEW_BMI_UNCLEAN_CYP
	WHERE source_db = 'PEDW'
	)d	
ON a.alf_e = d.alf_e
LEFT JOIN
	(
	SELECT	
		DISTINCT alf_e,
		1 AS NCCH
	FROM 
		SAILW1151V.HDR25_NEW_BMI_UNCLEAN_CYP
	WHERE source_db = 'NCCH'
	)e	
ON a.alf_e = e.alf_e;

SELECT 
	'CYP' AS pop,
	'NCCH' AS table_name, 
	count(DISTINCT alf_e) AS counts,
	ROUND((count(DISTINCT alf_e) * 1.0 / SAILW1151V.HDR25_BMI_TOTAL_ALFS_CLEAN_CYP * 100), 2) AS percentage 
FROM SAILW1151V.HDR25_NEW_BMI_UPSETPLOT_CYP
WHERE NCCH = 1
UNION
SELECT 
	'CYP' AS pop,
	'Unique to NCCH' AS table_name, 
	count(DISTINCT alf_e) AS counts,
	ROUND((count(DISTINCT alf_e) * 1.0 / SAILW1151V.HDR25_BMI_TOTAL_ALFS_CLEAN_CYP * 100), 2) AS percentage 
FROM SAILW1151V.HDR25_NEW_BMI_UPSETPLOT_CYP
WHERE MIDS = 0 AND WLGP = 0 AND NCCH = 1 AND PEDW = 0
UNION
SELECT 
	'CYP' AS pop,
	'Unique to MIDS' AS table_name, 
	count(DISTINCT alf_e) AS counts,
	ROUND((count(DISTINCT alf_e) * 1.0 / SAILW1151V.HDR25_BMI_TOTAL_ALFS_CLEAN_CYP * 100), 2) AS percentage 
FROM SAILW1151V.HDR25_NEW_BMI_UPSETPLOT_CYP
WHERE MIDS = 1 AND WLGP = 0 AND NCCH = 0 AND PEDW = 0
UNION
SELECT 
	'CYP' AS pop,
	'Unique to PEDW' AS table_name, 
	count(DISTINCT alf_e) AS counts,
	ROUND((count(DISTINCT alf_e) * 1.0 / SAILW1151V.HDR25_BMI_TOTAL_ALFS_CLEAN_CYP * 100), 2) AS percentage 
FROM SAILW1151V.HDR25_NEW_BMI_UPSETPLOT_CYP
WHERE MIDS = 0 AND WLGP = 0 AND NCCH = 0 AND PEDW = 1
UNION
SELECT 
	'CYP' AS pop,
	'WLGP' AS table_name, 
	count(DISTINCT alf_e) AS counts,
	ROUND((count(DISTINCT alf_e) * 1.0 / SAILW1151V.HDR25_BMI_TOTAL_ALFS_CLEAN_CYP * 100), 2) AS percentage 
FROM SAILW1151V.HDR25_NEW_BMI_UPSETPLOT_CYP
WHERE WLGP = 1
UNION
SELECT 
	'CYP' AS pop,
	'PEDW' AS table_name, 
	count(DISTINCT alf_e) AS counts,
	ROUND((count(DISTINCT alf_e) * 1.0 / SAILW1151V.HDR25_BMI_TOTAL_ALFS_CLEAN_CYP * 100), 2) AS percentage 
FROM SAILW1151V.HDR25_NEW_BMI_UPSETPLOT_CYP
WHERE PEDW = 1
UNION
SELECT 
	'CYP' AS pop,
	'MIDS' AS table_name, 
	count(DISTINCT alf_e) AS counts,
	ROUND((count(DISTINCT alf_e) * 1.0 / SAILW1151V.HDR25_BMI_TOTAL_ALFS_CLEAN_CYP * 100), 2) AS percentage 
FROM SAILW1151V.HDR25_NEW_BMI_UPSETPLOT_CYP
WHERE MIDS = 1
UNION
SELECT 
	'Adults' AS pop,
	'WLGP' AS table_name, 
	count(DISTINCT alf_e) AS counts,
	ROUND((count(DISTINCT alf_e) * 1.0 / SAILW1151V.HDR25_BMI_TOTAL_ALFS_CLEAN_ADULTS * 100), 2) AS percentage 
FROM SAILW1151V.HDR25_NEW_BMI_UPSETPLOT_ADULTS
WHERE WLGP = 1
UNION
SELECT 
	'Adults' AS pop,
	'Unique to PEDW' AS table_name, 
	count(DISTINCT alf_e) AS counts,
	ROUND((count(DISTINCT alf_e) * 1.0 / SAILW1151V.HDR25_BMI_TOTAL_ALFS_CLEAN_ADULTS * 100), 2) AS percentage 
FROM SAILW1151V.HDR25_NEW_BMI_UPSETPLOT_ADULTS
WHERE  MIDS = 0 AND WLGP = 0 AND PEDW = 1
UNION
SELECT 
	'Adults' AS pop,
	'Unique to MIDS' AS table_name, 
	count(DISTINCT alf_e) AS counts,
	ROUND((count(DISTINCT alf_e) * 1.0 / SAILW1151V.HDR25_BMI_TOTAL_ALFS_CLEAN_ADULTS * 100), 2) AS percentage 
FROM SAILW1151V.HDR25_NEW_BMI_UPSETPLOT_ADULTS
WHERE MIDS = 1 AND WLGP = 0 AND PEDW = 0
UNION
SELECT 
	'Adults' AS pop,
	'PEDW' AS table_name, 
	count(DISTINCT alf_e) AS counts,
	ROUND((count(DISTINCT alf_e) * 1.0 / SAILW1151V.HDR25_BMI_TOTAL_ALFS_CLEAN_ADULTS * 100), 2) AS percentage 
FROM SAILW1151V.HDR25_NEW_BMI_UPSETPLOT_ADULTS
WHERE PEDW = 1
UNION
SELECT 
	'Adults' AS pop,
	'MIDS' AS table_name, 
	count(DISTINCT alf_e) AS counts,
	ROUND((count(DISTINCT alf_e) * 1.0 / SAILW1151V.HDR25_BMI_TOTAL_ALFS_CLEAN_ADULTS * 100), 2) AS percentage 
FROM SAILW1151V.HDR25_NEW_BMI_UPSETPLOT_ADULTS
WHERE MIDS = 1
ORDER BY pop, table_name;

-------------------
-- Section 8. Putting all preservation (long) tables together to create the graphs
CALL FNC.DROP_IF_EXISTS ('SAILW1151V.HDR25_NEW_BMI_PRESERVATION_TABLE');

CREATE TABLE SAILW1151V.HDR25_NEW_BMI_PRESERVATION_TABLE
(
	pop				VARCHAR(10)
	,lookback		VARCHAR(10)
	,bmi_month		VARCHAR(10)
	,bmi_year		CHAR(4)
	,bmi_cat		VARCHAR(100)
	,counts			BIGINT

);

INSERT INTO SAILW1151V.HDR25_NEW_BMI_PRESERVATION_TABLE
WITH t1 AS (
SELECT DISTINCT
	'Adults' AS pop,
	lookback,
	bmi_month,
	bmi_year,
	bmi_cat,
	count(DISTINCT alf_e) AS counts
FROM
	SAILW1151V.HDR25_NEW_BMI_CAT_DENOM_ALLYEARS_long_5yr
WHERE bmi_year >= 2005
GROUP BY 
	lookback,
	bmi_month,
	bmi_year,
	bmi_cat
),
t2 AS (
SELECT DISTINCT
	'Adults' AS pop,
	lookback,
	bmi_month,
	bmi_year,
	bmi_cat,
	count(DISTINCT alf_e) AS counts
FROM
	SAILW1151V.HDR25_NEW_BMI_CAT_DENOM_ALLYEARS_long_allyr
WHERE bmi_year >= 2005
GROUP BY 
	lookback,
	bmi_month,
	bmi_year,
	bmi_cat
),
t3 AS (
SELECT DISTINCT
	'Adults' AS pop,
	lookback,
	bmi_month,
	bmi_year,
	bmi_cat,
	count(DISTINCT alf_e) AS counts
FROM
	SAILW1151V.HDR25_NEW_BMI_CAT_DENOM_ALLYEARS_long_1yr
WHERE bmi_year >= 2005
GROUP BY 
	lookback,
	bmi_month,
	bmi_year,
	bmi_cat
),
t4 AS (
SELECT DISTINCT
	'CYP' AS pop,
	lookback,
	bmi_month,
	bmi_year,
	bmi_cat,
	count(DISTINCT alf_e) AS counts
FROM
	SAILW1151V.HDR25_NEW_BMI_CAT_CYP_DENOM_ALLYEARS_long_5yr
WHERE bmi_year >= 2005
GROUP BY 
	lookback,
	bmi_month,
	bmi_year,
	bmi_cat
),
t5 AS (
SELECT DISTINCT
	'CYP' AS pop,
	lookback,
	bmi_month,
	bmi_year,
	bmi_cat,
	count(DISTINCT alf_e) AS counts
FROM
	SAILW1151V.HDR25_NEW_BMI_CAT_CYP_DENOM_ALLYEARS_long_allyr
WHERE bmi_year >= 2005
GROUP BY 
	lookback,
	bmi_month,
	bmi_year,
	bmi_cat
),
t6 AS (
SELECT DISTINCT
	'CYP' AS pop,
	lookback,
	bmi_month,
	bmi_year,
	bmi_cat,
	count(DISTINCT alf_e) AS counts
FROM
	SAILW1151V.HDR25_NEW_BMI_CAT_CYP_DENOM_ALLYEARS_long_1yr
WHERE bmi_year >= 2005
GROUP BY 
	lookback,
	bmi_month,
	bmi_year,
	bmi_cat
)
SELECT * FROM t1
UNION
SELECT * FROM t2
UNION
SELECT * FROM t3 
UNION
SELECT * FROM t4
UNION
SELECT * FROM t5
UNION
SELECT * FROM t6
ORDER BY 
	pop,
	lookback,
	bmi_month,
	bmi_year,
	bmi_cat;
